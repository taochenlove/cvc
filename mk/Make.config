# @copyright (c) 2017, Shenzhen Forward Industry Co.Ltd. All Rights Reserved.
# @author  huangjimin
# @date 2017-09-26
# @brief build infrastructure
ALOWED_MAKE_VERSIONS :=3.81 3.82

ifeq ($(filter $(ALOWED_MAKE_VERSIONS),$(MAKE_VERSION)),)
$(error Make $(MAKE_VERSION) not supported, use one of $(ALOWED_MAKE_VERSIONS))
endif

# the top Makefile node that include this file
CUR_MK_DIRNODE = $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))

########################################################################
#
# Set a default target if one is not set. If OVRT /* OVRT */ is set,
# then the target will become OVRT and a warning is printed
# if the assigned TARGET was different.
#

ifneq ($(strip $(OVRT)),)
override TARGET=$(OVRT)
endif

#
# If TARGET is not set, default to a Unix target based on host type
#
ifndef TARGET
 uname := $(shell uname -s)
 ifeq ($(filter-out Linux Darwin,$(uname)),)
   TARGET=native.linuxuser
 endif
 ifeq ($(uname),SunOS)
  TARGET=native.solarisuser
 endif
 ifeq ($(uname),NetBSD)
  TARGET=native.netbsduser
 endif
 ifndef	TARGET
  $(error Cannot determine TARGET in Make.config, uname = $(uname))
 endif
endif

export TARGET


#
# Set up the target name, and the target base variables.
#
# target = The full name of the target such as vxworks-bmw
# targetplat = 1nd part of target (e.g. x86) if any; otherwise same as 1st,
# targetos = 2st part of target (e.g. vxworks) {linuxkern, linuxuser, vxworks}
#
target     = ${TARGET}
targetsplt = $(subst ., , ${target})	# change hyphens to spaces
targetplat = $(word 1,${targetsplt})
targetos = $(subst ${targetplat}.,,${TARGET})
#targetos = $(word 1,${targetsplt})
#targetplat = $(subst ${targetos}.,,${TARGET})

CFGFLAGS += -DTARGETBASE=\"$(targetos)\" -DTARGETPLAT=\"$(targetplat)\"
#$(warning "TARGET=$(TARGET),targetos=$(targetos),targetplat=$(targetplat), platform=$(platform)")
#$(info "     $(realpath $(firstword $(MAKEFILE_LIST)))")
#$(info "     $(MAKEFILE_LIST)")
#$(info "     TARGET=$(TARGET),targetos=$(targetos),targetplat=$(targetplat), platform=$(platform)")
#
# Common configuration for all platforms
# (Additional platform-dependent configurations are in Makefile.xxx)
#
# auto detectDefault kernel source directory

ifeq (linuxkern, $(targetos))
ifneq (native, $(targetplat))
    KEY_WORD := arch/Kconfig
    LINUX_KDIR ?= $(shell if [ -n "$$LINUX_KDIR" ] ; then \
        echo $$LINUX_KDIR; \
        else \
        dir=$(CUR_MK_DIRNODE);cd $$dir; while true ; do \
        TRY=$$(find . -maxdepth 4  -path "*${KEY_WORD}"|sort| head -n 1 );      \
                if [ -z $$TRY ];then                                          \
                        if [ "$$dir" = "/" ] ; then                           \
                                echo Cannot find LINUX_KDIR in parent dir 1>&2; \
                                exit 1;                                      \
                        else                                                 \
                                dir=`cd .. ;pwd`;                            \
                        fi;                                                  \
                else                                                         \
                        dir=`cd $$(dirname $$TRY)/..;pwd`;                    \
                        cd $$dir;                                             \
                        echo `pwd`;                                          \
                        exit 0;                                              \
                fi;                                                          \
        cd $$dir;                                                             \
        done ;                                                               \
        fi)
    ifeq ($(LINUX_KDIR),)
    $(error "$(CUR_MK_DIRNODE)/Makefile can't detection LINUX_KDIR, Please specify")
    endif
    ifeq ($(MAKELEVEL),0)
    $(info "LINUX_KDIR = $(LINUX_KDIR)")
    endif
    export LINUX_KDIR
endif
endif


ifneq ($(LINUX_MAKE_SHARED_LIB),1)
#CFGLDFLAGS += -static
else
ifeq ($(SHAREDLIBVER),)
SHAREDLIBVER = 1
CFGFLAGS += -shared -fPIC
endif
endif
########################################################################
#
# STD_{C|CXX}FLAGS - Standard flags used by ALL compilations
# CFGFLAGS - Configuration flags used by ALL compilations
CFLAGS   += -DFILE_NAME=\"$(subst $(dir $<),,$<)\"
CFLAGS   += ${STD_CFLAGS} ${CFGFLAGS} $(ADD_CFLAGS)
CXXFLAGS += ${STD_CXXFLAGS} ${CFGFLAGS} $(ADD_CFLAGS)
LDFLAGS  += ${STD_LDFLAGS}  ${CFGLDFLAGS} $(ADD_LDFLAGS)

#
# THIS FILE SHOULD NOT BE MODIFIED LOCALLY, to override, add a file
# $SDK/mk/Make.var that sets your local settings, and/or provide
# a path to your settings using the MAKE_VAR variable.  If 
# either of these files exists, their values will override those in this makefile.
#
ifdef MAKE_VAR
include        ${MAKE_VAR}
else
-include	${SDK}/mk/Make.var
endif

#
# By default, turn off the "changing directory" message.
#
MAKEFLAGS += --no-print-directory

#
# Use gmake by default
#

include ${SDK}/mk/Make.tools
#include	${SDK}/mk/Makefile.${target}
include	${SDK}/mk/plat.${targetplat}

# For make v3.80, eval function can't be placed inside any ifxxx-endif section
# The bug is fixed in v3.81
eval_fixed_ver := 3.81
eval_fixed := $(filter $(eval_fixed_ver),$(firstword $(sort $(MAKE_VERSION) $(eval_fixed_ver))))


V ?= 0
# use  to control printing of compilation lines
ifeq (0,$(V))
#no VERBOSE
Q:=@
else
# VERBOSE
Q:=
endif

#
# Suffix to add to the "target" files to allow local builds with different
# flags. Set "target_suffix" to XXX to cause the build to put built objects
# in ${target}${target_suffix}. This allows things like building a debug
# version with different flags.  This may also be set in another Makefile.
#

#target_suffix :=
ifeq (,$(target_suffix))
target_suffix := .bb
endif

#
# Optional suffix to add to the build directory and output binary files
# to allow multiple builds to co-exist for various reasons.
#
#chip_suffix := -$(shell echo $(CHIP) | tr A-Z a-z)


#
# Default location to place binaries and make depend files for building
# purposes.
#

ifndef SDKBUILD
SDKBUILD :=build
endif

BLDROOT = ${SDK}/${SDKBUILD}/$(if ${BLDCONFIG},${BLDCONFIG}/)${target}.$(notdir  $(firstword $(CC)))${target_suffix}${BLDROOT_SUFFIX}
#$(info BLDROOT=$(BLDROOT))


# This is needed because we cannot include Make.vxworks before Make.config
#ifndef DEST_DIR_SUFFIX
#export DEST_DIR_SUFFIX :=$(subst $(realpath $(SDK))/app,,$(realpath $(CURDIR)/$(dir ($(firstword $(MAKEFILE_LIST))))))
#ifeq ($(MAKELEVEL),0)
#endif
#endif
#
#
#ifeq ($(DEST_DIR),)
#export DEST_DIR :=${SDK}/${SDKBUILD}$(if ${BLDCONFIG},/${BLDCONFIG})$(DEST_DIR_SUFFIX)
#endif


ifdef LOCALDIR
BLDDIR = ${BLDROOT}/${LOCALDIR}
else # ifdef LOCALDIR
BLDDIR = ${BLDROOT}
endif # ifdef LOCALDIR

LIBDIR = ${BLDROOT}
OUTDIR = ${BLDROOT}/out


#
# Paths of where we install files for make install
#
# install_headers - where to install header files.
# install_lib     - where to install libs
# install_bin	  - where to install completely linked binaries
#
install_headers	= ${SDK}/export/include
install_lib	= ${SDK}/export/lib/${target}
install_bin	= ${SDK}/export/bin/${target}

#
# Compilation Flags
#
# Flags may be added to (see below)
#
ifeq ($(DEBUG_SYMBOLS),TRUE)
CFLAGS += -g
CXXFLAGS += -g
endif

INCFLAGS = -I${SDK}/header
INCFLAGS += -I${SDK}/header/api/
INCFLAGS += -I${SDK}/header/common/
INCFLAGS += -I${SDK}/header/customer/
INCFLAGS += -I${SDK}/header/sal/
INCFLAGS += -I${SDK}/header/sal/base
INCFLAGS += -I${SDK}/header/soc/
INCFLAGS += -I${CUR_MK_DIRNODE}
INCFLAGS += -I${SDK}/lib/hsl
INCFLAGS += -I${SDK}/lib/hsl/common


CFLAGS += ${INCFLAGS}
CXXFLAGS += ${INCFLAGS}
CFLAGS += -Wno-strict-prototypes -Wno-unused-variable -Wno-unused-but-set-variable

#
# GCC pedantic mode.
#
ifeq ($(DEBUG_PEDANTIC),TRUE)
CFGFLAGS += -D__PEDANTIC__
CFLAGS += --pedantic
CXXFLAGS += --pedantic
endif

#
# In each directory, build a list of local sources, objects, and headers
#
ifeq ($(LSRCS),)
LSRCS	=	$(sort $(wildcard *.c *.cpp *.s *.cc *.C))
endif
LOBJS	=	$(addsuffix .o, $(basename ${LSRCS}))
BOBJS	= 	$(addprefix ${BLDDIR}/,${LOBJS})


#
# Rule to create object file (build) directory
#

.PHONY: all install clean distclean

.PRECIOUS: ${BLDDIR}/.tree $(EXECDIR)

%/.tree:
	@$(ECHO) "[$(target)] MKDIR   $(dir $@)"
	$Q($(MKDIR) $(dir $@); $(TOUCH) $@)

# Rule allowing build through CPP only, creates .i file from .c file.

%.i: %.c
	@$Q$(ECHO) "EEEE    ${LOCALDIR}/$<"
	$Q$(CC) -E ${CFLAGS} $< | $(SED) -e '/^ *$$/d' -e p -e d > $@

# Rule allowing build through source only, creates .s file from .c file.

%.s: %.c
	$Q$(CC) -S ${CFLAGS} $<

# allow disabling of dependency file generation
# enable partial recompilation through use of included
# dependency make files
#
ifndef NO_SDK_DEPS
# take the compiler generated .d file and reparse it 
# to generate a dependency graph rule for this object
# file
# the two steps generate:
#  file.o: file.c \
#	file.h ...
#
#  file.h: 
#  header.h: 
# some compilers will generate errors without the latter
# part of the list

.PHONY: .phony

DEPS_SED = \
	$(CP) $(BLDDIR)/$*.d $(BLDDIR)/$*.tmp;\
	$(ECHO) >> $(BLDDIR)/$*.tmp;\
	$(SED) -e 's/\#.*//' -e 's/^[^:]*: *//' \
	-e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' \
	-e '/^ .$$/d' \
	< $(BLDDIR)/$*.d >> $(BLDDIR)/$*.tmp; \
	$(SED) -e 's|^\([^\/ ].*\.o\):|'$(BLDDIR)/'\1:|g'  \
	-e 's|.*?/\(.*\.o\):|'$(BLDDIR)/'\1:|g'  \
	< $(BLDDIR)/$*.tmp > $(BLDDIR)/$*.P; \
	$(RM) -f $(BLDDIR)/$*.d $(BLDDIR)/$*.tmp
DEPS_CMD = $(DEPS_SED)

ifeq ($(targetos),ghs)
DEPS_CMD = $(DEPS_SED)
else
ifeq ($(VX_VERSION),55)
# this supports the tornado 2.x.x compiler
# (VxWorks 5.x)
DEPS_CMD = $(DEPS_SED)
else
ifneq ($(findstring gnu,$(TOOL)),)
# Gnu compilers always support -MD -MF
DEPS_OPT = -MD -MF $(BLDDIR)/$*.d
DEPS_CMD = $(DEPS_SED)
else
ifneq (,$(filter 64 65,$(VX_VERSION)))
BCM_CFLAGS = -Xstop-on-warning -Xlint
DEPS_OPT = -Xmake-dependency=4 -Xmake-dependency-savefile=$(BLDDIR)/$*.d
DEPS_CMD = $(DEPS_SED)
else
ifneq ($(findstring i686,$(CROSS_COMPILE)),)
# Gcc 2.95 does not support -MD -MF with -o and -c
else
# newer gnu-based compilers allow -MD -MF
DEPS_OPT = -MD -MF $(BLDDIR)/$*.d
DEPS_CMD = $(DEPS_SED)
endif
endif
endif
endif
endif

# From gmsl

# Standard definitions for true and false.  true is any non-empty
# string, false is an empty string. These are intended for use with
# $(if).

true  := T
false :=

# ----------------------------------------------------------------------------
# Function:  not
# Arguments: 1: A boolean value
# Returns:   Returns the opposite of the arg. (true -> false, false -> true)
# ----------------------------------------------------------------------------
not = $(if $1,$(false),$(true))

# ----------------------------------------------------------------------------
# Function:  map
# Arguments: 1: Name of function to $(call) for each element of list
#            2: List to iterate over calling the function in 1
# Returns:   The list after calling the function on each element
# ----------------------------------------------------------------------------
map = $(strip $(foreach a,$2,$(call $1,$a)))

# ----------------------------------------------------------------------------
# Function:  seq
# Arguments: 1: A string to compare against...
#            2: ...this string
# Returns:   Returns $(true) if the two strings are identical
# ----------------------------------------------------------------------------
seq = $(if $(filter-out xx,x$(subst $1,,$2)$(subst $2,,$1)x),$(false),$(true))

# ----------------------------------------------------------------------------
# Function:  sne
# Arguments: 1: A string to compare against...
#            2: ...this string
# Returns:   Returns $(true) if the two strings are not the same
# ----------------------------------------------------------------------------
sne = $(call not,$(call seq,$1,$2))

# End from gmsl

# Define comma symbol so we can repace it with a variable
comma :=,

# Signature
last_target :=

dump_var = $$(eval $1 := $($1))

define new_rule
@echo '$(call map,dump_var,@ < *)' > $S
@$(if $(wildcard $F),,touch $F)
@echo $@: $F >> $S
endef

define do
$(eval S := $(BLDDIR)/$*.sig)$(eval F := $(BLDDIR)/$*.force)$(eval C := $1)
$(if $(call sne,$@,$(last_target)),$(call new_rule),$(eval last_target := $@))
@echo '$$(if $$(call sne,$$(sort $1),$(sort $(subst $(comma),$$(comma),$C))),$$(shell touch $F))' >> $S
$Q$C
endef

# end of Signature


else # ifndef NO_SDK_DEPS
# No dependency files, faster compile times
# no partial compile support
DEPS_SED =
DEPS_OPT =
DEPS_CPY =
DEPS_CMD = /bin/true

define do
$(eval C := $1)
$Q$C
endef

endif # ifndef NO_SDK_DEPS

#
# Default Build rules for .c --> .o, leaving the binary in BLDDIR/X.o,
# even if file not built from directory of source.
#

${BLDDIR}/%.o: %.c
ifdef EEEE
	@$Q$(ECHO) "EEEE    ${LOCALDIR}/$<"
	$Q$(CC) -E ${CFLAGS} $(EXTRA_CFLAGS) $< | $(SED) -e '/^ *$$/d' -e p -e d > $(@:.o=.i)
endif
# echo Compiling needed to properly process errors 
	$Q$(MKDIR) $(BLDDIR)/
	$Q$(MKDIR) $(dir $@)
	$Q$(RM) -f $@
	@$Q$(ECHO) "[$(target)] CCCC    ${LOCALDIR}/$<"
	$Q$(call do,$$(CC) $$(DEPS_OPT) $$(CFLAGS) $$(EXTRA_CFLAGS) -o $$@ -c $$(realpath $$<))  && ($(DEPS_CMD))

${BLDDIR}/%.o: %.s
ifeq (@,$(Q))
	@$(ECHO) ASAS ${LOCALDIR}/$<
endif
	$Q$(CC) ${CFLAGS} ${EXTRA_CFLAGS} -o $@ -c $(realpath $<)

${BLDDIR}/%.o: %.cpp
ifeq (@,$(Q))
	@$(ECHO) "[$(target)] CCCC    ${LOCALDIR}/$<"
endif
	$Q$(CXX) ${CXXFLAGS}  -o $@ -c $(realpath $<)

${BLDDIR}/%.o: %.cc ${BLDDIR}/.tree
ifeq (@,$(Q))
	@$(ECHO) "[$(target)] CCCC    ${LOCALDIR}/$<"
endif
	$Q$(CXX) ${CXXFLAGS} -o $@ -c $(realpath $<)

#
# Cause "make foo.o" in any subdirectory to put the object in the build
# directory instead of the local directory.
#
%.o: ${BLDDIR}/%.o
	@


#
# Java Support
#
JAVAC	= /bin/javac
JAVACFLAGS= -nowarn

${BLDDIR}/%.class: %.java
	$(JAVAC) ${JAVACFLAGS} -d ${BLDDIR} $<

%.Z: %
	@$(ECHO) COMPRESSING $< .....
	@$(COMPRESS) -c $< > $@

%.gz: %
	@$(ECHO) COMPRESSING $< .....
	@$(GZIP) -c $< > $@


#
# Some Basic tools
#
INSTALL = /usr/ucb/install
INSTALLFLAGS =
CTAGS   = ctags
ETAGS	= etags


DIRS =	${BLDDIR}

#
# Targets for build
#
include ${SDK}/mk/Make.targets

ifeq (help, $(MAKECMDGOALS))
targetlist := $(sort $(subst $(SDK)/mk/plat.,, $(wildcard $(SDK)/mk/plat.*.*)))
help:
	 @$(if true, \
	$(foreach v, $(sort $(targetlist)), echo "OVRT=$(v)";) \
	 echo '')
	@echo ""
endif
ifeq (C_COMPILER,$(MAKECMDGOALS))
C_COMPILER:
	@echo $(CC)
endif

ifeq (CXX_COMPILER,$(MAKECMDGOALS))
CXX_COMPILER:
	@echo $(CXX)
endif



